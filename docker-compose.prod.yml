version: '3.8'

services:
    # Application service
    api:
        build:
            context: .
            dockerfile: Dockerfile
        environment:
            NODE_ENV: production
            PORT: 3000
            DATABASE_URL: postgresql://fantasy_user:fantasy_password@postgres:5432/fantasy_characters_dev
            JWT_SECRET: ${JWT_SECRET:-change-this-in-production}
            JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-change-this-in-production}
            CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
        ports:
            - '3000:3000'
        depends_on:
            postgres:
                condition: service_healthy
        healthcheck:
            test:
                [
                    'CMD',
                    'sh',
                    '-c',
                    'wget --no-verbose --tries=1 --spider http://localhost:3000/api/health && wget --no-verbose --tries=1 --spider http://localhost:3000/api/ready',
                ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 10s
        restart: unless-stopped
        networks:
            - fantasy_network

    # PostgreSQL Database
    postgres:
        build:
            context: ./docker/postgres
            dockerfile: Dockerfile
        environment:
            POSTGRES_DB: fantasy_characters_dev
            POSTGRES_USER: fantasy_user
            POSTGRES_PASSWORD: fantasy_password
            POSTGRES_INITDB_ARGS: '--encoding=UTF8 --locale=C'
        ports:
            - '5432:5432'
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./docker/postgres/init:/docker-entrypoint-initdb.d
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U fantasy_user -d fantasy_characters_dev']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 30s
        restart: unless-stopped
        networks:
            - fantasy_network

    # For development convenience - PostgreSQL admin interface
    pgadmin:
        image: dpage/pgadmin4:latest
        environment:
            PGADMIN_DEFAULT_EMAIL: admin@fantasy-api.dev
            PGADMIN_DEFAULT_PASSWORD: admin123
            PGADMIN_CONFIG_SERVER_MODE: 'False'
        ports:
            - '8080:80'
        volumes:
            - pgadmin_data:/var/lib/pgadmin
        depends_on:
            postgres:
                condition: service_healthy
        restart: unless-stopped
        networks:
            - fantasy_network
        profiles:
            - admin

volumes:
    postgres_data:
        driver: local
    pgadmin_data:
        driver: local

networks:
    fantasy_network:
        driver: bridge
