// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum Slot {
  NONE
  HEAD
  FACE
  CHEST
  LEGS
  FEET
  HANDS
  ONE_HAND
  TWO_HANDS
  RING
  AMULET
  BELT
  BACKPACK
  CLOAK
}

enum Sex {
  MALE
  FEMALE
}

enum Visibility {
  PUBLIC
  PRIVATE
  HIDDEN
}

// Models
model User {
  // Core fields
  id              String  @id @db.Uuid
  email           String  @unique
  passwordHash    String
  role            Role    @default(USER)
  isEmailVerified Boolean @default(false)
  isActive        Boolean @default(true)

  // Optional info fields
  name String?
  bio  String?

  // OAuth fields
  oauthProvider String?
  oauthId       String?

  // Timestamps
  lastPasswordChange DateTime?
  lastLogin          DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Moderation fields
  isBanned    Boolean   @default(false)
  banReason   String?
  bannedUntil DateTime?
  bannedById  String?

  // Profile picture
  profilePictureId String? @unique @db.Uuid
  profilePicture   Image?  @relation("UserProfilePicture", fields: [profilePictureId], references: [id], onDelete: SetNull)

  // Relations
  characters    Character[]    @relation("UserCharacters")
  images        Image[]        @relation("UserImages")
  tags          Tag[]          @relation("UserTags")
  items         Item[]         @relation("UserItems")
  races         Race[]         @relation("UserRaces")
  perks         Perk[]         @relation("UserPerks")
  skills        Skill[]        @relation("UserSkills")
  archetypes    Archetype[]    @relation("UserArchetypes")
  refreshTokens RefreshToken[] @relation("UserRefreshTokens")

  @@index([email])
  @@index([name])
  @@map("users")
}

model RefreshToken {
  // Core fields
  id        String   @id @db.Uuid
  token     String   @unique
  userId    String   @db.Uuid
  user      User     @relation("UserRefreshTokens", fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  isRevoked Boolean  @default(false)

  // Device/session info
  deviceInfo String?
  ipAddress  String?
  userAgent  String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@index([token, isRevoked, expiresAt], map: "idx_refresh_tokens_token_active")
  @@index([userId, isRevoked, expiresAt, id], map: "idx_refresh_tokens_user_active")
  @@map("refresh_tokens")
}

model Image {
  // Core fields
  id          String  @id @db.Uuid
  blob        Bytes
  description String?
  size        Int
  mimeType    String
  width       Int
  height      Int

  // Owner
  ownerId String? @db.Uuid
  owner   User?   @relation("UserImages", fields: [ownerId], references: [id], onDelete: SetNull)

  // Optional profile picture relation
  userProfile User? @relation("UserProfilePicture")

  // Relations
  characters Character[] @relation("CharacterImages")
  races      Race[]      @relation("RaceImages")
  archetypes Archetype[] @relation("ArchetypeImages")
  skills     Skill[]     @relation("SkillImages")
  items      Item[]      @relation("ItemImages")
  perks      Perk[]      @relation("PerkImages")

  // Visibility and metadata
  visibility Visibility @default(PUBLIC)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([ownerId])
  @@index([visibility])
  @@index([ownerId, visibility, createdAt(sort: Desc), id(sort: Desc)], map: "idx_images_owner_visibility_recent")
  @@index([visibility, createdAt(sort: Desc), id(sort: Desc)], map: "idx_images_visibility_recent")
  @@map("images")
}

model Tag {
  // Core fields
  id          String  @id @db.Uuid
  name        String  @unique
  description String?

  // Owner
  ownerId String? @db.Uuid
  owner   User?   @relation("UserTags", fields: [ownerId], references: [id], onDelete: SetNull)

  // Relations
  skills     Skill[]     @relation("SkillTags")
  perks      Perk[]      @relation("PerkTags")
  races      Race[]      @relation("RaceTags")
  archetypes Archetype[] @relation("ArchetypeTags")
  items      Item[]      @relation("ItemTags")
  characters Character[] @relation("CharacterTags")

  // Visibility and metadata
  visibility Visibility @default(PUBLIC)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([name])
  @@index([ownerId])
  @@index([visibility])
  @@index([visibility, name, id], map: "idx_tags_visibility_name")
  @@index([ownerId, visibility, name, id], map: "idx_tags_owner_visibility_name")
  @@map("tags")
}

model Race {
  // Core fields
  id          String  @id @db.Uuid
  name        String  @unique
  description String?

  // Attribute modifiers
  healthModifier       Int @default(100)
  manaModifier         Int @default(100)
  staminaModifier      Int @default(100)
  strengthModifier     Int @default(10)
  constitutionModifier Int @default(10)
  dexterityModifier    Int @default(10)
  intelligenceModifier Int @default(10)
  wisdomModifier       Int @default(10)
  charismaModifier     Int @default(10)

  // Owner
  ownerId String? @db.Uuid
  owner   User?   @relation("UserRaces", fields: [ownerId], references: [id], onDelete: SetNull)

  // Image
  imageId String? @db.Uuid
  image   Image?  @relation("RaceImages", fields: [imageId], references: [id], onDelete: SetNull)

  // Relations
  characters Character[] @relation("CharacterRaces")
  skills     Skill[]     @relation("RaceSkills")
  archetypes Archetype[] @relation("ArchetypeRequiredRaces")
  tags       Tag[]       @relation("RaceTags")

  // Visibility and metadata
  visibility Visibility @default(PUBLIC)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([name])
  @@index([ownerId])
  @@index([visibility])
  @@index([ownerId, visibility, name, id], map: "idx_races_owner_visibility_name")
  @@index([visibility, createdAt(sort: Desc), id(sort: Desc)], map: "idx_races_visibility_recent")
  @@index([strengthModifier, constitutionModifier, dexterityModifier], map: "idx_races_modifiers")
  @@map("races")
}

model Archetype {
  // Core fields
  id          String  @id @db.Uuid
  name        String  @unique
  description String?

  // Image
  imageId String? @db.Uuid
  image   Image?  @relation("ArchetypeImages", fields: [imageId], references: [id], onDelete: SetNull)

  // Relations
  characters    Character[] @relation("CharacterArchetypes")
  skills        Skill[]     @relation("ArchetypeSkills")
  requiredRaces Race[]      @relation("ArchetypeRequiredRaces")
  tags          Tag[]       @relation("ArchetypeTags")

  // Owner
  ownerId String? @db.Uuid
  owner   User?   @relation("UserArchetypes", fields: [ownerId], references: [id], onDelete: SetNull)

  // Visibility and metadata
  visibility Visibility @default(PUBLIC)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([name])
  @@index([ownerId])
  @@index([visibility])
  @@index([ownerId, visibility, name, id], map: "idx_archetypes_owner_visibility_name")
  @@index([visibility, createdAt(sort: Desc), id(sort: Desc)], map: "idx_archetypes_visibility_recent")
  @@map("archetypes")
}

model Skill {
  id            String  @id @db.Uuid
  name          String  @unique
  description   String?
  requiredLevel Int     @default(1)

  // Image
  imageId String? @db.Uuid
  image   Image?  @relation("SkillImages", fields: [imageId], references: [id], onDelete: SetNull)

  // Relations
  characters Character[] @relation("CharacterSkills")
  races      Race[]      @relation("RaceSkills")
  archetypes Archetype[] @relation("ArchetypeSkills")
  items      Item[]      @relation("ItemBonusSkills")
  tags       Tag[]       @relation("SkillTags")

  // Owner
  ownerId String? @db.Uuid
  owner   User?   @relation("UserSkills", fields: [ownerId], references: [id], onDelete: SetNull)

  // Visibility and metadata
  visibility Visibility @default(PUBLIC)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([name])
  @@index([ownerId])
  @@index([visibility])
  @@index([requiredLevel, visibility, ownerId, id], map: "idx_skills_level_visibility")
  @@index([ownerId, visibility, name, id], map: "idx_skills_owner_visibility_name")
  @@map("skills")
}

model Perk {
  // Core fields
  id            String  @id @db.Uuid
  name          String  @unique
  description   String?
  requiredLevel Int     @default(0)

  // Image
  imageId String? @db.Uuid
  image   Image?  @relation("PerkImages", fields: [imageId], references: [id], onDelete: SetNull)

  // Relations
  characters Character[] @relation("CharacterPerks")
  items      Item[]      @relation("ItemBonusPerks")
  tags       Tag[]       @relation("PerkTags")

  // Owner
  ownerId String? @db.Uuid
  owner   User?   @relation("UserPerks", fields: [ownerId], references: [id], onDelete: SetNull)

  // Visibility and metadata
  visibility Visibility @default(PUBLIC)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([name])
  @@index([ownerId])
  @@index([visibility])
  @@index([requiredLevel, visibility, ownerId, id], map: "idx_perks_level_visibility")
  @@index([ownerId, visibility, name, id], map: "idx_perks_owner_visibility_name")
  @@map("perks")
}

model Item {
  id          String  @id @db.Uuid
  name        String  @unique
  description String?

  // Attribute bonuses
  bonusHealth       Int?
  bonusMana         Int?
  bonusStamina      Int?
  bonusStrength     Int?
  bonusConstitution Int?
  bonusDexterity    Int?
  bonusIntelligence Int?
  bonusWisdom       Int?
  bonusCharisma     Int?

  // Combat stats
  damage  Int?
  defense Int?

  // Item properties
  rarity        Rarity  @default(COMMON)
  slot          Slot    @default(NONE)
  requiredLevel Int     @default(1)
  weight        Float   @default(1.0)
  durability    Int     @default(100)
  maxDurability Int     @default(100)
  value         Int     @default(0)
  bonusSkills   Skill[] @relation("ItemBonusSkills")
  bonusPerks    Perk[]  @relation("ItemBonusPerks")
  tags          Tag[]   @relation("ItemTags")

  // Item flags
  is2Handed    Boolean @default(false)
  isThrowable  Boolean @default(false)
  isConsumable Boolean @default(false)
  isQuestItem  Boolean @default(false)
  isTradeable  Boolean @default(true)

  // Owner
  ownerId String? @db.Uuid
  owner   User?   @relation("UserItems", fields: [ownerId], references: [id], onDelete: SetNull)

  // Image
  imageId String? @db.Uuid
  image   Image?  @relation("ItemImages", fields: [imageId], references: [id], onDelete: SetNull)

  // Equipment - relations with specific item slots
  equipmentHeadSlot      Equipment[] @relation("EquipmentHead")
  equipmentFaceSlot      Equipment[] @relation("EquipmentFace")
  equipmentChestSlot     Equipment[] @relation("EquipmentChest")
  equipmentLegsSlot      Equipment[] @relation("EquipmentLegs")
  equipmentFeetSlot      Equipment[] @relation("EquipmentFeet")
  equipmentHandsSlot     Equipment[] @relation("EquipmentHands")
  equipmentRightHandSlot Equipment[] @relation("EquipmentRightHand")
  equipmentLeftHandSlot  Equipment[] @relation("EquipmentLeftHand")
  equipmentRightRingSlot Equipment[] @relation("EquipmentRightRing")
  equipmentLeftRingSlot  Equipment[] @relation("EquipmentLeftRing")
  equipmentAmuletSlot    Equipment[] @relation("EquipmentAmulet")
  equipmentBeltSlot      Equipment[] @relation("EquipmentBelt")
  equipmentBackpackSlot  Equipment[] @relation("EquipmentBackpack")
  equipmentCloakSlot     Equipment[] @relation("EquipmentCloak")

  // Inventory
  characterInventories Character[] @relation("CharacterInventory")

  // Visibility and metadata
  visibility Visibility @default(PUBLIC)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([name])
  @@index([rarity])
  @@index([slot])
  @@index([requiredLevel])
  @@index([ownerId])
  @@index([visibility])
  @@index([rarity, slot, requiredLevel, visibility, id], map: "idx_items_rarity_slot_level")
  @@index([ownerId, visibility, name, id], map: "idx_items_owner_visibility_name")
  @@index([ownerId, visibility, createdAt(sort: Desc), id(sort: Desc)], map: "idx_items_owner_recent")
  @@index([slot, requiredLevel], map: "idx_items_slot_level")
  @@index([damage, defense], map: "idx_items_combat_stats")
  @@map("items")
}

model Equipment {
  id          String    @id @db.Uuid
  characterId String    @unique @db.Uuid
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  // Fixed slots — each supports specific item types
  headId String? @db.Uuid
  head   Item?   @relation("EquipmentHead", fields: [headId], references: [id], onDelete: SetNull)

  faceId String? @db.Uuid
  face   Item?   @relation("EquipmentFace", fields: [faceId], references: [id], onDelete: SetNull)

  chestId String? @db.Uuid
  chest   Item?   @relation("EquipmentChest", fields: [chestId], references: [id], onDelete: SetNull)

  legsId String? @db.Uuid
  legs   Item?   @relation("EquipmentLegs", fields: [legsId], references: [id], onDelete: SetNull)

  feetId String? @db.Uuid
  feet   Item?   @relation("EquipmentFeet", fields: [feetId], references: [id], onDelete: SetNull)

  handsId String? @db.Uuid
  hands   Item?   @relation("EquipmentHands", fields: [handsId], references: [id], onDelete: SetNull)

  rightHandId String? @db.Uuid
  rightHand   Item?   @relation("EquipmentRightHand", fields: [rightHandId], references: [id], onDelete: SetNull)

  leftHandId String? @db.Uuid
  leftHand   Item?   @relation("EquipmentLeftHand", fields: [leftHandId], references: [id], onDelete: SetNull)

  rightRingId String? @db.Uuid
  rightRing   Item?   @relation("EquipmentRightRing", fields: [rightRingId], references: [id], onDelete: SetNull)

  leftRingId String? @db.Uuid
  leftRing   Item?   @relation("EquipmentLeftRing", fields: [leftRingId], references: [id], onDelete: SetNull)

  amuletId String? @db.Uuid
  amulet   Item?   @relation("EquipmentAmulet", fields: [amuletId], references: [id], onDelete: SetNull)

  beltId String? @db.Uuid
  belt   Item?   @relation("EquipmentBelt", fields: [beltId], references: [id], onDelete: SetNull)

  backpackId String? @db.Uuid
  backpack   Item?   @relation("EquipmentBackpack", fields: [backpackId], references: [id], onDelete: SetNull)

  cloakId String? @db.Uuid
  cloak   Item?   @relation("EquipmentCloak", fields: [cloakId], references: [id], onDelete: SetNull)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([characterId])
  @@map("equipment")
}

model Character {
  id          String  @id @db.Uuid
  name        String  @unique
  sex         Sex     @default(MALE)
  age         Int     @default(18)
  description String?
  level       Int     @default(1)
  experience  Int     @default(0)

  // Image
  imageId String? @db.Uuid
  image   Image?  @relation("CharacterImages", fields: [imageId], references: [id], onDelete: SetNull)

  // Owner
  ownerId String @db.Uuid
  owner   User   @relation("UserCharacters", fields: [ownerId], references: [id], onDelete: Cascade)

  // Core attributes
  health  Int @default(100)
  mana    Int @default(100)
  stamina Int @default(100)

  // Primary attributes
  strength     Int @default(10)
  constitution Int @default(10)
  dexterity    Int @default(10)
  intelligence Int @default(10)
  wisdom       Int @default(10)
  charisma     Int @default(10)

  // Character
  raceId      String    @db.Uuid
  race        Race      @relation("CharacterRaces", fields: [raceId], references: [id], onDelete: Restrict)
  archetypeId String    @db.Uuid
  archetype   Archetype @relation("CharacterArchetypes", fields: [archetypeId], references: [id], onDelete: Restrict)

  // Equipment — dedicated entity with fixed slots
  equipment Equipment?

  // Inventory
  inventory Item[] @relation("CharacterInventory")

  // Other relations
  skills Skill[] @relation("CharacterSkills")
  perks  Perk[]  @relation("CharacterPerks")
  tags   Tag[]   @relation("CharacterTags")

  // Visibility and metadata
  visibility Visibility @default(PUBLIC)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([ownerId, visibility, createdAt(sort: Desc), id(sort: Desc)], map: "idx_characters_owner_recent")
  @@index([ownerId, visibility, archetypeId, raceId, level(sort: Desc), createdAt(sort: Desc), id(sort: Desc)], map: "idx_characters_search_core")
  @@index([archetypeId, raceId, visibility, level(sort: Desc), createdAt(sort: Desc), id(sort: Desc)], map: "idx_characters_taxonomy")
  @@map("characters")
}
